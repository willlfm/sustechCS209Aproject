<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.analyzer.mapper.AnswerMapper">
<!--    <select id="selectBlog" resultType="com.example.analyzer.model.Answer">-->
<!--        select * from stackoverflow.answers-->
<!--    </select>-->
    <insert id="insert" parameterType="com.example.analyzer.model.Answer">
        INSERT INTO answer (
        answer_id,
        question_id,
        score,
        is_accepted,
        owner_user_id,
        creation_date
        ) VALUES (
        #{answerId},
        #{questionId},
        #{score},
        #{isAccepted},
        #{ownerUserId},
        #{creationDate}
        )
        ON CONFLICT (answer_id)
        DO UPDATE SET
        question_id = EXCLUDED.question_id,
        score = EXCLUDED.score,
        is_accepted = EXCLUDED.is_accepted,
        owner_user_id = EXCLUDED.owner_user_id,
        creation_date = EXCLUDED.creation_date
    </insert>

    <select id="calculateAvgCreationDateDiff" resultType="map">
        SELECT
        CASE
        WHEN a.is_accepted = TRUE OR a.score > 1000 THEN 'highQuality'
        ELSE 'lowQuality'
        END AS quality,
        AVG(EXTRACT(min FROM age(a.creation_date, q.creation_date))) AS avg_date_diff
        FROM
        answer a
        JOIN
        question q ON a.question_id = q.question_id
        GROUP BY
        quality
    </select>

    <select id="calculateAvgReputation" resultType="map">
        SELECT
        CASE
        WHEN a.is_accepted = TRUE OR a.score > 1000 THEN 'highQuality'
        ELSE 'lowQuality'
        END AS quality,
        AVG(p.reputation) AS avg_reputation
        FROM
        answer a
        JOIN
        person p ON a.owner_user_id = p.user_id

        GROUP BY
        quality
    </select>

    <select id="calculateAvgAcceptRate" resultType="map">
        SELECT
        CASE
        WHEN a.is_accepted = TRUE OR a.score > 1000 THEN 'highQuality'
        ELSE 'lowQuality'
        END AS quality,
        AVG(p.accept_rate) AS avg_accept_rate
        FROM
        answer a
        JOIN
        person p ON a.owner_user_id = p.user_id

        GROUP BY
        quality
    </select>
</mapper>